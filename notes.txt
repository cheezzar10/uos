starting UOS image using qemu

$ qemu-system-i386 -m 1 -display curses -fda uos.img -no-fd-bootchk -boot order=a

the same as above but with hard disk installed

$ qemu-system-i386 -m 1 -display curses -fda uos.img -hda hda.img -no-fd-bootchk -boot order=a

loader.s and loader.c are the second stage loader files which will configure paging and pass control
the core of the system written in Rust

disassembly of loader code

tail -c ++513 loader.bin > loader.bin.code
objdump -D -bbinary -mi386 loader.bin

Nearest development tasks
1. vm map fixes. binary loaded and mapped to 64k offset ( starting at address 0x0 )
this approach has the follwing problems: 
a. system binary larger than 63k will corrupt gdt
b. first kernel task stack located at 128k - 4 bytes boundary ( stack area mapped using identity mapping )
c. we need some space for kernel heap ( may be memory area after BIOS data area? ) or starting at 4k and mapped higher in memory

2. drop SCR_BUF global pointer and perform screen output using dedicated C function
3. currently returning from task function will crash the system ( we need task_wrapper(task_fn: fn()) )
this design assumes that newly created threads will have it's eip point to task_wrapper and task function addr will be placed on top of the task stack

4. implement dynamic memory allocator ( bitmap allocator, 16k of dynamic memory )
